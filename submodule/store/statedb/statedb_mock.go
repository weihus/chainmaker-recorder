// Code generated by MockGen. DO NOT EDIT.
// Source: ./statedb/statedb.go

// Package statedb is a generated GoMock package.
package statedb

import (
	reflect "reflect"

	accesscontrol "chainmaker.org/chainmaker/pb-go/v2/accesscontrol"
	config "chainmaker.org/chainmaker/pb-go/v2/config"
	protocol "chainmaker.org/chainmaker/protocol/v2"
	serialization "chainmaker.org/chainmaker/store/v2/serialization"
	gomock "github.com/golang/mock/gomock"
)

// MockStateDB is a mock of StateDB interface.
type MockStateDB struct {
	ctrl     *gomock.Controller
	recorder *MockStateDBMockRecorder
}

// MockStateDBMockRecorder is the mock recorder for MockStateDB.
type MockStateDBMockRecorder struct {
	mock *MockStateDB
}

// NewMockStateDB creates a new mock instance.
func NewMockStateDB(ctrl *gomock.Controller) *MockStateDB {
	mock := &MockStateDB{ctrl: ctrl}
	mock.recorder = &MockStateDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateDB) EXPECT() *MockStateDBMockRecorder {
	return m.recorder
}

// BeginDbTransaction mocks base method.
func (m *MockStateDB) BeginDbTransaction(txName string) (protocol.SqlDBTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginDbTransaction", txName)
	ret0, _ := ret[0].(protocol.SqlDBTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginDbTransaction indicates an expected call of BeginDbTransaction.
func (mr *MockStateDBMockRecorder) BeginDbTransaction(txName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginDbTransaction", reflect.TypeOf((*MockStateDB)(nil).BeginDbTransaction), txName)
}

// Close mocks base method.
func (m *MockStateDB) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockStateDBMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStateDB)(nil).Close))
}

// CommitBlock mocks base method.
func (m *MockStateDB) CommitBlock(blockWithRWSet *serialization.BlockWithSerializedInfo, isCache bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitBlock", blockWithRWSet, isCache)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitBlock indicates an expected call of CommitBlock.
func (mr *MockStateDBMockRecorder) CommitBlock(blockWithRWSet, isCache interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitBlock", reflect.TypeOf((*MockStateDB)(nil).CommitBlock), blockWithRWSet, isCache)
}

// CommitDbTransaction mocks base method.
func (m *MockStateDB) CommitDbTransaction(txName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitDbTransaction", txName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitDbTransaction indicates an expected call of CommitDbTransaction.
func (mr *MockStateDBMockRecorder) CommitDbTransaction(txName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitDbTransaction", reflect.TypeOf((*MockStateDB)(nil).CommitDbTransaction), txName)
}

// CreateDatabase mocks base method.
func (m *MockStateDB) CreateDatabase(contractName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatabase", contractName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDatabase indicates an expected call of CreateDatabase.
func (mr *MockStateDBMockRecorder) CreateDatabase(contractName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatabase", reflect.TypeOf((*MockStateDB)(nil).CreateDatabase), contractName)
}

// DropDatabase mocks base method.
func (m *MockStateDB) DropDatabase(contractName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropDatabase", contractName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropDatabase indicates an expected call of DropDatabase.
func (mr *MockStateDBMockRecorder) DropDatabase(contractName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropDatabase", reflect.TypeOf((*MockStateDB)(nil).DropDatabase), contractName)
}

// ExecDdlSql mocks base method.
func (m *MockStateDB) ExecDdlSql(contractName, sql, version string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecDdlSql", contractName, sql, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecDdlSql indicates an expected call of ExecDdlSql.
func (mr *MockStateDBMockRecorder) ExecDdlSql(contractName, sql, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecDdlSql", reflect.TypeOf((*MockStateDB)(nil).ExecDdlSql), contractName, sql, version)
}

// GetChainConfig mocks base method.
func (m *MockStateDB) GetChainConfig() (*config.ChainConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainConfig")
	ret0, _ := ret[0].(*config.ChainConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainConfig indicates an expected call of GetChainConfig.
func (mr *MockStateDBMockRecorder) GetChainConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainConfig", reflect.TypeOf((*MockStateDB)(nil).GetChainConfig))
}

// GetContractDbName mocks base method.
func (m *MockStateDB) GetContractDbName(contractName string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractDbName", contractName)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetContractDbName indicates an expected call of GetContractDbName.
func (mr *MockStateDBMockRecorder) GetContractDbName(contractName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractDbName", reflect.TypeOf((*MockStateDB)(nil).GetContractDbName), contractName)
}

// GetDbTransaction mocks base method.
func (m *MockStateDB) GetDbTransaction(txName string) (protocol.SqlDBTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDbTransaction", txName)
	ret0, _ := ret[0].(protocol.SqlDBTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDbTransaction indicates an expected call of GetDbTransaction.
func (mr *MockStateDBMockRecorder) GetDbTransaction(txName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDbTransaction", reflect.TypeOf((*MockStateDB)(nil).GetDbTransaction), txName)
}

// GetLastSavepoint mocks base method.
func (m *MockStateDB) GetLastSavepoint() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastSavepoint")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastSavepoint indicates an expected call of GetLastSavepoint.
func (mr *MockStateDBMockRecorder) GetLastSavepoint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastSavepoint", reflect.TypeOf((*MockStateDB)(nil).GetLastSavepoint))
}

// GetMemberExtraData mocks base method.
func (m *MockStateDB) GetMemberExtraData(member *accesscontrol.Member) (*accesscontrol.MemberExtraData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberExtraData", member)
	ret0, _ := ret[0].(*accesscontrol.MemberExtraData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberExtraData indicates an expected call of GetMemberExtraData.
func (mr *MockStateDBMockRecorder) GetMemberExtraData(member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberExtraData", reflect.TypeOf((*MockStateDB)(nil).GetMemberExtraData), member)
}

// InitGenesis mocks base method.
func (m *MockStateDB) InitGenesis(genesisBlock *serialization.BlockWithSerializedInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitGenesis", genesisBlock)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitGenesis indicates an expected call of InitGenesis.
func (mr *MockStateDBMockRecorder) InitGenesis(genesisBlock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitGenesis", reflect.TypeOf((*MockStateDB)(nil).InitGenesis), genesisBlock)
}

// QueryMulti mocks base method.
func (m *MockStateDB) QueryMulti(contractName, sql string, values ...interface{}) (protocol.SqlRows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{contractName, sql}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryMulti", varargs...)
	ret0, _ := ret[0].(protocol.SqlRows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMulti indicates an expected call of QueryMulti.
func (mr *MockStateDBMockRecorder) QueryMulti(contractName, sql interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{contractName, sql}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMulti", reflect.TypeOf((*MockStateDB)(nil).QueryMulti), varargs...)
}

// QuerySingle mocks base method.
func (m *MockStateDB) QuerySingle(contractName, sql string, values ...interface{}) (protocol.SqlRow, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{contractName, sql}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QuerySingle", varargs...)
	ret0, _ := ret[0].(protocol.SqlRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuerySingle indicates an expected call of QuerySingle.
func (mr *MockStateDBMockRecorder) QuerySingle(contractName, sql interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{contractName, sql}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySingle", reflect.TypeOf((*MockStateDB)(nil).QuerySingle), varargs...)
}

// ReadObject mocks base method.
func (m *MockStateDB) ReadObject(contractName string, key []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadObject", contractName, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadObject indicates an expected call of ReadObject.
func (mr *MockStateDBMockRecorder) ReadObject(contractName, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadObject", reflect.TypeOf((*MockStateDB)(nil).ReadObject), contractName, key)
}

// ReadObjects mocks base method.
func (m *MockStateDB) ReadObjects(contractName string, keys [][]byte) ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadObjects", contractName, keys)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadObjects indicates an expected call of ReadObjects.
func (mr *MockStateDBMockRecorder) ReadObjects(contractName, keys interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadObjects", reflect.TypeOf((*MockStateDB)(nil).ReadObjects), contractName, keys)
}

// RollbackDbTransaction mocks base method.
func (m *MockStateDB) RollbackDbTransaction(txName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackDbTransaction", txName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackDbTransaction indicates an expected call of RollbackDbTransaction.
func (mr *MockStateDBMockRecorder) RollbackDbTransaction(txName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackDbTransaction", reflect.TypeOf((*MockStateDB)(nil).RollbackDbTransaction), txName)
}

// SelectObject mocks base method.
func (m *MockStateDB) SelectObject(contractName string, startKey, limit []byte) (protocol.StateIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectObject", contractName, startKey, limit)
	ret0, _ := ret[0].(protocol.StateIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectObject indicates an expected call of SelectObject.
func (mr *MockStateDBMockRecorder) SelectObject(contractName, startKey, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectObject", reflect.TypeOf((*MockStateDB)(nil).SelectObject), contractName, startKey, limit)
}
