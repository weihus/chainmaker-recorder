// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pubsubmsg.proto

package pb

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type IHaveOrWant_Phase int32

const (
	IHaveOrWant_IHave         IHaveOrWant_Phase = 0
	IHaveOrWant_IHaveAndIWant IHaveOrWant_Phase = 1
	IHaveOrWant_IWant         IHaveOrWant_Phase = 2
)

var IHaveOrWant_Phase_name = map[int32]string{
	0: "IHave",
	1: "IHaveAndIWant",
	2: "IWant",
}

var IHaveOrWant_Phase_value = map[string]int32{
	"IHave":         0,
	"IHaveAndIWant": 1,
	"IWant":         2,
}

func (x IHaveOrWant_Phase) String() string {
	return proto.EnumName(IHaveOrWant_Phase_name, int32(x))
}

func (IHaveOrWant_Phase) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_49af150e0f4cd5d0, []int{6, 0}
}

type PubsubMsg struct {
	Msg         []*ApplicationMsg `protobuf:"bytes,1,rep,name=msg,proto3" json:"msg,omitempty"`
	SpreadCtrl  *IHaveOrWant      `protobuf:"bytes,2,opt,name=spread_ctrl,json=spreadCtrl,proto3" json:"spread_ctrl,omitempty"`
	TopicCtrl   *TopicMsg         `protobuf:"bytes,3,opt,name=topic_ctrl,json=topicCtrl,proto3" json:"topic_ctrl,omitempty"`
	PeeringCtrl *PeeringMsg       `protobuf:"bytes,4,opt,name=peering_ctrl,json=peeringCtrl,proto3" json:"peering_ctrl,omitempty"`
}

func (m *PubsubMsg) Reset()         { *m = PubsubMsg{} }
func (m *PubsubMsg) String() string { return proto.CompactTextString(m) }
func (*PubsubMsg) ProtoMessage()    {}
func (*PubsubMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_49af150e0f4cd5d0, []int{0}
}
func (m *PubsubMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PubsubMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PubsubMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PubsubMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubsubMsg.Merge(m, src)
}
func (m *PubsubMsg) XXX_Size() int {
	return m.Size()
}
func (m *PubsubMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_PubsubMsg.DiscardUnknown(m)
}

var xxx_messageInfo_PubsubMsg proto.InternalMessageInfo

func (m *PubsubMsg) GetMsg() []*ApplicationMsg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *PubsubMsg) GetSpreadCtrl() *IHaveOrWant {
	if m != nil {
		return m.SpreadCtrl
	}
	return nil
}

func (m *PubsubMsg) GetTopicCtrl() *TopicMsg {
	if m != nil {
		return m.TopicCtrl
	}
	return nil
}

func (m *PubsubMsg) GetPeeringCtrl() *PeeringMsg {
	if m != nil {
		return m.PeeringCtrl
	}
	return nil
}

type Heartbeat struct {
	Timestamp    uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	TimestampRes uint64 `protobuf:"varint,2,opt,name=timestamp_res,json=timestampRes,proto3" json:"timestamp_res,omitempty"`
}

func (m *Heartbeat) Reset()         { *m = Heartbeat{} }
func (m *Heartbeat) String() string { return proto.CompactTextString(m) }
func (*Heartbeat) ProtoMessage()    {}
func (*Heartbeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_49af150e0f4cd5d0, []int{1}
}
func (m *Heartbeat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Heartbeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Heartbeat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Heartbeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Heartbeat.Merge(m, src)
}
func (m *Heartbeat) XXX_Size() int {
	return m.Size()
}
func (m *Heartbeat) XXX_DiscardUnknown() {
	xxx_messageInfo_Heartbeat.DiscardUnknown(m)
}

var xxx_messageInfo_Heartbeat proto.InternalMessageInfo

func (m *Heartbeat) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Heartbeat) GetTimestampRes() uint64 {
	if m != nil {
		return m.TimestampRes
	}
	return 0
}

type ApplicationMsg struct {
	Topics     []string `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
	Sender     string   `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	MsgSeq     uint64   `protobuf:"varint,3,opt,name=msg_seq,json=msgSeq,proto3" json:"msg_seq,omitempty"`
	MsgBody    []byte   `protobuf:"bytes,4,opt,name=msg_body,json=msgBody,proto3" json:"msg_body,omitempty"`
	SenderKey  []byte   `protobuf:"bytes,5,opt,name=sender_key,json=senderKey,proto3" json:"sender_key,omitempty"`
	SenderSign []byte   `protobuf:"bytes,6,opt,name=sender_sign,json=senderSign,proto3" json:"sender_sign,omitempty"`
	Stations   []string `protobuf:"bytes,7,rep,name=stations,proto3" json:"stations,omitempty"`
}

func (m *ApplicationMsg) Reset()         { *m = ApplicationMsg{} }
func (m *ApplicationMsg) String() string { return proto.CompactTextString(m) }
func (*ApplicationMsg) ProtoMessage()    {}
func (*ApplicationMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_49af150e0f4cd5d0, []int{2}
}
func (m *ApplicationMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationMsg.Merge(m, src)
}
func (m *ApplicationMsg) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationMsg proto.InternalMessageInfo

func (m *ApplicationMsg) GetTopics() []string {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *ApplicationMsg) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *ApplicationMsg) GetMsgSeq() uint64 {
	if m != nil {
		return m.MsgSeq
	}
	return 0
}

func (m *ApplicationMsg) GetMsgBody() []byte {
	if m != nil {
		return m.MsgBody
	}
	return nil
}

func (m *ApplicationMsg) GetSenderKey() []byte {
	if m != nil {
		return m.SenderKey
	}
	return nil
}

func (m *ApplicationMsg) GetSenderSign() []byte {
	if m != nil {
		return m.SenderSign
	}
	return nil
}

func (m *ApplicationMsg) GetStations() []string {
	if m != nil {
		return m.Stations
	}
	return nil
}

type TopicMsg struct {
	Subscribed   []string `protobuf:"bytes,1,rep,name=subscribed,proto3" json:"subscribed,omitempty"`
	Unsubscribed []string `protobuf:"bytes,2,rep,name=unsubscribed,proto3" json:"unsubscribed,omitempty"`
	MsgSeq       uint64   `protobuf:"varint,3,opt,name=msg_seq,json=msgSeq,proto3" json:"msg_seq,omitempty"`
}

func (m *TopicMsg) Reset()         { *m = TopicMsg{} }
func (m *TopicMsg) String() string { return proto.CompactTextString(m) }
func (*TopicMsg) ProtoMessage()    {}
func (*TopicMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_49af150e0f4cd5d0, []int{3}
}
func (m *TopicMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicMsg.Merge(m, src)
}
func (m *TopicMsg) XXX_Size() int {
	return m.Size()
}
func (m *TopicMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicMsg.DiscardUnknown(m)
}

var xxx_messageInfo_TopicMsg proto.InternalMessageInfo

func (m *TopicMsg) GetSubscribed() []string {
	if m != nil {
		return m.Subscribed
	}
	return nil
}

func (m *TopicMsg) GetUnsubscribed() []string {
	if m != nil {
		return m.Unsubscribed
	}
	return nil
}

func (m *TopicMsg) GetMsgSeq() uint64 {
	if m != nil {
		return m.MsgSeq
	}
	return 0
}

type PeeringMsg struct {
	CutOff []string `protobuf:"bytes,1,rep,name=cut_off,json=cutOff,proto3" json:"cut_off,omitempty"`
	JoinUp []string `protobuf:"bytes,2,rep,name=join_up,json=joinUp,proto3" json:"join_up,omitempty"`
	MsgSeq uint64   `protobuf:"varint,3,opt,name=msg_seq,json=msgSeq,proto3" json:"msg_seq,omitempty"`
}

func (m *PeeringMsg) Reset()         { *m = PeeringMsg{} }
func (m *PeeringMsg) String() string { return proto.CompactTextString(m) }
func (*PeeringMsg) ProtoMessage()    {}
func (*PeeringMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_49af150e0f4cd5d0, []int{4}
}
func (m *PeeringMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeeringMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeeringMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeeringMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeeringMsg.Merge(m, src)
}
func (m *PeeringMsg) XXX_Size() int {
	return m.Size()
}
func (m *PeeringMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_PeeringMsg.DiscardUnknown(m)
}

var xxx_messageInfo_PeeringMsg proto.InternalMessageInfo

func (m *PeeringMsg) GetCutOff() []string {
	if m != nil {
		return m.CutOff
	}
	return nil
}

func (m *PeeringMsg) GetJoinUp() []string {
	if m != nil {
		return m.JoinUp
	}
	return nil
}

func (m *PeeringMsg) GetMsgSeq() uint64 {
	if m != nil {
		return m.MsgSeq
	}
	return 0
}

type MsgMetadata struct {
	Topic  string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Sender string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	MsgSeq uint64 `protobuf:"varint,3,opt,name=msg_seq,json=msgSeq,proto3" json:"msg_seq,omitempty"`
}

func (m *MsgMetadata) Reset()         { *m = MsgMetadata{} }
func (m *MsgMetadata) String() string { return proto.CompactTextString(m) }
func (*MsgMetadata) ProtoMessage()    {}
func (*MsgMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_49af150e0f4cd5d0, []int{5}
}
func (m *MsgMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMetadata.Merge(m, src)
}
func (m *MsgMetadata) XXX_Size() int {
	return m.Size()
}
func (m *MsgMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMetadata proto.InternalMessageInfo

func (m *MsgMetadata) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *MsgMetadata) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgMetadata) GetMsgSeq() uint64 {
	if m != nil {
		return m.MsgSeq
	}
	return 0
}

type IHaveOrWant struct {
	Phase IHaveOrWant_Phase `protobuf:"varint,1,opt,name=phase,proto3,enum=pubsub.IHaveOrWant_Phase" json:"phase,omitempty"`
	Have  []*MsgMetadata    `protobuf:"bytes,2,rep,name=have,proto3" json:"have,omitempty"`
	Want  []*MsgMetadata    `protobuf:"bytes,3,rep,name=want,proto3" json:"want,omitempty"`
}

func (m *IHaveOrWant) Reset()         { *m = IHaveOrWant{} }
func (m *IHaveOrWant) String() string { return proto.CompactTextString(m) }
func (*IHaveOrWant) ProtoMessage()    {}
func (*IHaveOrWant) Descriptor() ([]byte, []int) {
	return fileDescriptor_49af150e0f4cd5d0, []int{6}
}
func (m *IHaveOrWant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IHaveOrWant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IHaveOrWant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IHaveOrWant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IHaveOrWant.Merge(m, src)
}
func (m *IHaveOrWant) XXX_Size() int {
	return m.Size()
}
func (m *IHaveOrWant) XXX_DiscardUnknown() {
	xxx_messageInfo_IHaveOrWant.DiscardUnknown(m)
}

var xxx_messageInfo_IHaveOrWant proto.InternalMessageInfo

func (m *IHaveOrWant) GetPhase() IHaveOrWant_Phase {
	if m != nil {
		return m.Phase
	}
	return IHaveOrWant_IHave
}

func (m *IHaveOrWant) GetHave() []*MsgMetadata {
	if m != nil {
		return m.Have
	}
	return nil
}

func (m *IHaveOrWant) GetWant() []*MsgMetadata {
	if m != nil {
		return m.Want
	}
	return nil
}

func init() {
	proto.RegisterEnum("pubsub.IHaveOrWant_Phase", IHaveOrWant_Phase_name, IHaveOrWant_Phase_value)
	proto.RegisterType((*PubsubMsg)(nil), "pubsub.PubsubMsg")
	proto.RegisterType((*Heartbeat)(nil), "pubsub.Heartbeat")
	proto.RegisterType((*ApplicationMsg)(nil), "pubsub.ApplicationMsg")
	proto.RegisterType((*TopicMsg)(nil), "pubsub.TopicMsg")
	proto.RegisterType((*PeeringMsg)(nil), "pubsub.PeeringMsg")
	proto.RegisterType((*MsgMetadata)(nil), "pubsub.MsgMetadata")
	proto.RegisterType((*IHaveOrWant)(nil), "pubsub.IHaveOrWant")
}

func init() { proto.RegisterFile("pubsubmsg.proto", fileDescriptor_49af150e0f4cd5d0) }

var fileDescriptor_49af150e0f4cd5d0 = []byte{
	// 606 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xcb, 0x6e, 0xd3, 0x4c,
	0x14, 0xc7, 0xe3, 0xe6, 0xd2, 0xfa, 0x38, 0xed, 0xd7, 0x6f, 0x40, 0xc5, 0x45, 0x60, 0x2a, 0xb3,
	0x20, 0x1b, 0x62, 0x54, 0x60, 0x8d, 0x5a, 0x36, 0xad, 0x50, 0x68, 0xe5, 0x16, 0x55, 0xb0, 0x89,
	0xc6, 0xf6, 0x64, 0x3a, 0xd4, 0x97, 0xa9, 0x67, 0x5c, 0x94, 0xb7, 0xe0, 0x99, 0x58, 0xb1, 0xac,
	0xc4, 0x86, 0x25, 0x6a, 0x5f, 0x04, 0xcd, 0xb1, 0xd3, 0xa4, 0x12, 0x45, 0x62, 0x37, 0xe7, 0xfc,
	0x7f, 0xff, 0x99, 0x73, 0x71, 0x02, 0xff, 0xc9, 0x2a, 0x52, 0x55, 0x94, 0x29, 0x3e, 0x94, 0x65,
	0xa1, 0x0b, 0xd2, 0xab, 0x13, 0xfe, 0x0f, 0x0b, 0xec, 0x43, 0x3c, 0x8e, 0x14, 0x27, 0x03, 0x68,
	0x67, 0x8a, 0xbb, 0xd6, 0x56, 0x7b, 0xe0, 0x6c, 0x6f, 0x0c, 0x6b, 0x66, 0xb8, 0x23, 0x65, 0x2a,
	0x62, 0xaa, 0x45, 0x91, 0x8f, 0x14, 0x0f, 0x0d, 0x42, 0x5e, 0x81, 0xa3, 0x64, 0xc9, 0x68, 0x32,
	0x8e, 0x75, 0x99, 0xba, 0x4b, 0x5b, 0xd6, 0xc0, 0xd9, 0xbe, 0x37, 0x73, 0xec, 0xef, 0xd1, 0x0b,
	0x76, 0x50, 0x9e, 0xd0, 0x5c, 0x87, 0x50, 0x73, 0x6f, 0x75, 0x99, 0x92, 0x00, 0x40, 0x17, 0x52,
	0xc4, 0xb5, 0xa9, 0x8d, 0xa6, 0xf5, 0x99, 0xe9, 0xd8, 0x28, 0xe6, 0x01, 0x1b, 0x19, 0x34, 0xbc,
	0x86, 0xbe, 0x64, 0xac, 0x14, 0x39, 0xaf, 0x2d, 0x1d, 0xb4, 0x90, 0x99, 0xe5, 0xb0, 0xd6, 0x8c,
	0xc9, 0x69, 0x38, 0x63, 0xf3, 0xdf, 0x83, 0xbd, 0xc7, 0x68, 0xa9, 0x23, 0x46, 0x35, 0x79, 0x04,
	0xb6, 0x16, 0x19, 0x53, 0x9a, 0x66, 0xd2, 0xb5, 0xb6, 0xac, 0x41, 0x27, 0x9c, 0x27, 0xc8, 0x53,
	0x58, 0xbd, 0x09, 0xc6, 0x25, 0x53, 0xd8, 0x4a, 0x27, 0xec, 0xdf, 0x24, 0x43, 0xa6, 0xfc, 0x4b,
	0x0b, 0xd6, 0x6e, 0x4f, 0x81, 0x6c, 0x40, 0x0f, 0xcb, 0x54, 0x38, 0x2d, 0x3b, 0x6c, 0x22, 0x93,
	0x57, 0x2c, 0x4f, 0x58, 0x89, 0x17, 0xd9, 0x61, 0x13, 0x91, 0x07, 0xb0, 0x9c, 0x29, 0x3e, 0x56,
	0xec, 0x1c, 0xfb, 0xee, 0x84, 0xbd, 0x4c, 0xf1, 0x23, 0x76, 0x4e, 0x36, 0x61, 0xc5, 0x08, 0x51,
	0x91, 0x4c, 0xb1, 0xbd, 0x7e, 0x68, 0xc0, 0xdd, 0x22, 0x99, 0x92, 0xc7, 0x00, 0xb5, 0x7b, 0x7c,
	0xc6, 0xa6, 0x6e, 0x17, 0x45, 0xbb, 0xce, 0xbc, 0x63, 0x53, 0xf2, 0x04, 0x9c, 0x46, 0x56, 0x82,
	0xe7, 0x6e, 0x0f, 0xf5, 0xc6, 0x71, 0x24, 0x78, 0x4e, 0x1e, 0xc2, 0x8a, 0xd2, 0x58, 0xb1, 0x72,
	0x97, 0xb1, 0xca, 0x9b, 0xd8, 0xe7, 0xb0, 0x32, 0x1b, 0x38, 0xf1, 0x00, 0x54, 0x15, 0xa9, 0xb8,
	0x14, 0x11, 0x4b, 0x9a, 0x7e, 0x16, 0x32, 0xc4, 0x87, 0x7e, 0x95, 0x2f, 0x10, 0x4b, 0x48, 0xdc,
	0xca, 0xdd, 0xd9, 0x9f, 0x7f, 0x02, 0x30, 0x5f, 0x93, 0xc1, 0xe2, 0x4a, 0x8f, 0x8b, 0xc9, 0x64,
	0x36, 0xb7, 0xb8, 0xd2, 0x07, 0x93, 0x89, 0x11, 0x3e, 0x17, 0x22, 0x1f, 0x57, 0xb2, 0xb9, 0xbe,
	0x67, 0xc2, 0x0f, 0xf2, 0xee, 0x8b, 0x8f, 0xc1, 0x19, 0x29, 0x3e, 0x62, 0x9a, 0x26, 0x54, 0x53,
	0x72, 0x1f, 0xba, 0xb8, 0x02, 0x5c, 0xb1, 0x1d, 0xd6, 0xc1, 0x3f, 0xaf, 0xc3, 0xff, 0x66, 0x81,
	0xb3, 0xf0, 0xf9, 0x92, 0x00, 0xba, 0xf2, 0x94, 0x2a, 0x86, 0xd7, 0xae, 0x6d, 0x6f, 0xfe, 0xe1,
	0x13, 0x1f, 0x1e, 0x1a, 0x20, 0xac, 0x39, 0xf2, 0x0c, 0x3a, 0xa7, 0xf4, 0x82, 0x61, 0x17, 0x0b,
	0x3f, 0x89, 0x85, 0x52, 0x43, 0x04, 0x0c, 0xf8, 0x85, 0xe6, 0xda, 0x6d, 0xff, 0x05, 0x34, 0x80,
	0xff, 0x02, 0xba, 0xf8, 0x02, 0xb1, 0xa1, 0x8b, 0xcf, 0xae, 0xb7, 0xc8, 0xff, 0xb0, 0x8a, 0xc7,
	0x9d, 0x3c, 0xd9, 0x37, 0x35, 0xac, 0x5b, 0xa8, 0xe2, 0x71, 0x69, 0xf7, 0xe3, 0xf7, 0x2b, 0xcf,
	0xba, 0xbc, 0xf2, 0xac, 0x5f, 0x57, 0x9e, 0xf5, 0xf5, 0xda, 0x6b, 0x5d, 0x5e, 0x7b, 0xad, 0x9f,
	0xd7, 0x5e, 0xeb, 0xd3, 0x9b, 0xf8, 0x94, 0x8a, 0x3c, 0xa3, 0x67, 0xac, 0x1c, 0x16, 0x25, 0x0f,
	0xe6, 0xe1, 0x73, 0x5e, 0x04, 0x59, 0x91, 0x54, 0x29, 0x0b, 0x72, 0xa6, 0x83, 0x54, 0x9c, 0x57,
	0x22, 0x09, 0x94, 0xc8, 0x64, 0xca, 0x82, 0xba, 0xb6, 0x40, 0x46, 0x51, 0x0f, 0xff, 0x3f, 0x5e,
	0xfe, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x26, 0x09, 0x2a, 0x3d, 0x52, 0x04, 0x00, 0x00,
}

func (m *PubsubMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubsubMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubsubMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PeeringCtrl != nil {
		{
			size, err := m.PeeringCtrl.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPubsubmsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.TopicCtrl != nil {
		{
			size, err := m.TopicCtrl.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPubsubmsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SpreadCtrl != nil {
		{
			size, err := m.SpreadCtrl.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPubsubmsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Msg) > 0 {
		for iNdEx := len(m.Msg) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Msg[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPubsubmsg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Heartbeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Heartbeat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Heartbeat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimestampRes != 0 {
		i = encodeVarintPubsubmsg(dAtA, i, uint64(m.TimestampRes))
		i--
		dAtA[i] = 0x10
	}
	if m.Timestamp != 0 {
		i = encodeVarintPubsubmsg(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Stations) > 0 {
		for iNdEx := len(m.Stations) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Stations[iNdEx])
			copy(dAtA[i:], m.Stations[iNdEx])
			i = encodeVarintPubsubmsg(dAtA, i, uint64(len(m.Stations[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.SenderSign) > 0 {
		i -= len(m.SenderSign)
		copy(dAtA[i:], m.SenderSign)
		i = encodeVarintPubsubmsg(dAtA, i, uint64(len(m.SenderSign)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SenderKey) > 0 {
		i -= len(m.SenderKey)
		copy(dAtA[i:], m.SenderKey)
		i = encodeVarintPubsubmsg(dAtA, i, uint64(len(m.SenderKey)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MsgBody) > 0 {
		i -= len(m.MsgBody)
		copy(dAtA[i:], m.MsgBody)
		i = encodeVarintPubsubmsg(dAtA, i, uint64(len(m.MsgBody)))
		i--
		dAtA[i] = 0x22
	}
	if m.MsgSeq != 0 {
		i = encodeVarintPubsubmsg(dAtA, i, uint64(m.MsgSeq))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintPubsubmsg(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Topics) > 0 {
		for iNdEx := len(m.Topics) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Topics[iNdEx])
			copy(dAtA[i:], m.Topics[iNdEx])
			i = encodeVarintPubsubmsg(dAtA, i, uint64(len(m.Topics[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TopicMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MsgSeq != 0 {
		i = encodeVarintPubsubmsg(dAtA, i, uint64(m.MsgSeq))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Unsubscribed) > 0 {
		for iNdEx := len(m.Unsubscribed) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Unsubscribed[iNdEx])
			copy(dAtA[i:], m.Unsubscribed[iNdEx])
			i = encodeVarintPubsubmsg(dAtA, i, uint64(len(m.Unsubscribed[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Subscribed) > 0 {
		for iNdEx := len(m.Subscribed) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Subscribed[iNdEx])
			copy(dAtA[i:], m.Subscribed[iNdEx])
			i = encodeVarintPubsubmsg(dAtA, i, uint64(len(m.Subscribed[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PeeringMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeeringMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeeringMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MsgSeq != 0 {
		i = encodeVarintPubsubmsg(dAtA, i, uint64(m.MsgSeq))
		i--
		dAtA[i] = 0x18
	}
	if len(m.JoinUp) > 0 {
		for iNdEx := len(m.JoinUp) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.JoinUp[iNdEx])
			copy(dAtA[i:], m.JoinUp[iNdEx])
			i = encodeVarintPubsubmsg(dAtA, i, uint64(len(m.JoinUp[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CutOff) > 0 {
		for iNdEx := len(m.CutOff) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CutOff[iNdEx])
			copy(dAtA[i:], m.CutOff[iNdEx])
			i = encodeVarintPubsubmsg(dAtA, i, uint64(len(m.CutOff[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MsgSeq != 0 {
		i = encodeVarintPubsubmsg(dAtA, i, uint64(m.MsgSeq))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintPubsubmsg(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Topic) > 0 {
		i -= len(m.Topic)
		copy(dAtA[i:], m.Topic)
		i = encodeVarintPubsubmsg(dAtA, i, uint64(len(m.Topic)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IHaveOrWant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IHaveOrWant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IHaveOrWant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Want) > 0 {
		for iNdEx := len(m.Want) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Want[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPubsubmsg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Have) > 0 {
		for iNdEx := len(m.Have) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Have[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPubsubmsg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Phase != 0 {
		i = encodeVarintPubsubmsg(dAtA, i, uint64(m.Phase))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPubsubmsg(dAtA []byte, offset int, v uint64) int {
	offset -= sovPubsubmsg(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PubsubMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Msg) > 0 {
		for _, e := range m.Msg {
			l = e.Size()
			n += 1 + l + sovPubsubmsg(uint64(l))
		}
	}
	if m.SpreadCtrl != nil {
		l = m.SpreadCtrl.Size()
		n += 1 + l + sovPubsubmsg(uint64(l))
	}
	if m.TopicCtrl != nil {
		l = m.TopicCtrl.Size()
		n += 1 + l + sovPubsubmsg(uint64(l))
	}
	if m.PeeringCtrl != nil {
		l = m.PeeringCtrl.Size()
		n += 1 + l + sovPubsubmsg(uint64(l))
	}
	return n
}

func (m *Heartbeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovPubsubmsg(uint64(m.Timestamp))
	}
	if m.TimestampRes != 0 {
		n += 1 + sovPubsubmsg(uint64(m.TimestampRes))
	}
	return n
}

func (m *ApplicationMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Topics) > 0 {
		for _, s := range m.Topics {
			l = len(s)
			n += 1 + l + sovPubsubmsg(uint64(l))
		}
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovPubsubmsg(uint64(l))
	}
	if m.MsgSeq != 0 {
		n += 1 + sovPubsubmsg(uint64(m.MsgSeq))
	}
	l = len(m.MsgBody)
	if l > 0 {
		n += 1 + l + sovPubsubmsg(uint64(l))
	}
	l = len(m.SenderKey)
	if l > 0 {
		n += 1 + l + sovPubsubmsg(uint64(l))
	}
	l = len(m.SenderSign)
	if l > 0 {
		n += 1 + l + sovPubsubmsg(uint64(l))
	}
	if len(m.Stations) > 0 {
		for _, s := range m.Stations {
			l = len(s)
			n += 1 + l + sovPubsubmsg(uint64(l))
		}
	}
	return n
}

func (m *TopicMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Subscribed) > 0 {
		for _, s := range m.Subscribed {
			l = len(s)
			n += 1 + l + sovPubsubmsg(uint64(l))
		}
	}
	if len(m.Unsubscribed) > 0 {
		for _, s := range m.Unsubscribed {
			l = len(s)
			n += 1 + l + sovPubsubmsg(uint64(l))
		}
	}
	if m.MsgSeq != 0 {
		n += 1 + sovPubsubmsg(uint64(m.MsgSeq))
	}
	return n
}

func (m *PeeringMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CutOff) > 0 {
		for _, s := range m.CutOff {
			l = len(s)
			n += 1 + l + sovPubsubmsg(uint64(l))
		}
	}
	if len(m.JoinUp) > 0 {
		for _, s := range m.JoinUp {
			l = len(s)
			n += 1 + l + sovPubsubmsg(uint64(l))
		}
	}
	if m.MsgSeq != 0 {
		n += 1 + sovPubsubmsg(uint64(m.MsgSeq))
	}
	return n
}

func (m *MsgMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovPubsubmsg(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovPubsubmsg(uint64(l))
	}
	if m.MsgSeq != 0 {
		n += 1 + sovPubsubmsg(uint64(m.MsgSeq))
	}
	return n
}

func (m *IHaveOrWant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Phase != 0 {
		n += 1 + sovPubsubmsg(uint64(m.Phase))
	}
	if len(m.Have) > 0 {
		for _, e := range m.Have {
			l = e.Size()
			n += 1 + l + sovPubsubmsg(uint64(l))
		}
	}
	if len(m.Want) > 0 {
		for _, e := range m.Want {
			l = e.Size()
			n += 1 + l + sovPubsubmsg(uint64(l))
		}
	}
	return n
}

func sovPubsubmsg(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPubsubmsg(x uint64) (n int) {
	return sovPubsubmsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PubsubMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsubmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubsubMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubsubMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsubmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPubsubmsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPubsubmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg, &ApplicationMsg{})
			if err := m.Msg[len(m.Msg)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpreadCtrl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsubmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPubsubmsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPubsubmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SpreadCtrl == nil {
				m.SpreadCtrl = &IHaveOrWant{}
			}
			if err := m.SpreadCtrl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicCtrl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsubmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPubsubmsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPubsubmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TopicCtrl == nil {
				m.TopicCtrl = &TopicMsg{}
			}
			if err := m.TopicCtrl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeeringCtrl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsubmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPubsubmsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPubsubmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PeeringCtrl == nil {
				m.PeeringCtrl = &PeeringMsg{}
			}
			if err := m.PeeringCtrl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubsubmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPubsubmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Heartbeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsubmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Heartbeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Heartbeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsubmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampRes", wireType)
			}
			m.TimestampRes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsubmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimestampRes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPubsubmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPubsubmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsubmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topics", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsubmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsubmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsubmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topics = append(m.Topics, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsubmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsubmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsubmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgSeq", wireType)
			}
			m.MsgSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsubmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgSeq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgBody", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsubmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPubsubmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsubmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgBody = append(m.MsgBody[:0], dAtA[iNdEx:postIndex]...)
			if m.MsgBody == nil {
				m.MsgBody = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsubmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPubsubmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsubmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderKey = append(m.SenderKey[:0], dAtA[iNdEx:postIndex]...)
			if m.SenderKey == nil {
				m.SenderKey = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderSign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsubmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPubsubmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsubmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderSign = append(m.SenderSign[:0], dAtA[iNdEx:postIndex]...)
			if m.SenderSign == nil {
				m.SenderSign = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stations", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsubmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsubmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsubmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stations = append(m.Stations, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubsubmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPubsubmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsubmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscribed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsubmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsubmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsubmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscribed = append(m.Subscribed, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unsubscribed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsubmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsubmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsubmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unsubscribed = append(m.Unsubscribed, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgSeq", wireType)
			}
			m.MsgSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsubmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgSeq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPubsubmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPubsubmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeeringMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsubmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeeringMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeeringMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CutOff", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsubmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsubmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsubmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CutOff = append(m.CutOff, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinUp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsubmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsubmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsubmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JoinUp = append(m.JoinUp, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgSeq", wireType)
			}
			m.MsgSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsubmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgSeq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPubsubmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPubsubmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsubmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsubmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsubmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsubmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsubmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsubmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsubmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgSeq", wireType)
			}
			m.MsgSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsubmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgSeq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPubsubmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPubsubmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IHaveOrWant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsubmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IHaveOrWant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IHaveOrWant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			m.Phase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsubmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Phase |= IHaveOrWant_Phase(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Have", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsubmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPubsubmsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPubsubmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Have = append(m.Have, &MsgMetadata{})
			if err := m.Have[len(m.Have)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Want", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsubmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPubsubmsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPubsubmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Want = append(m.Want, &MsgMetadata{})
			if err := m.Want[len(m.Want)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubsubmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPubsubmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPubsubmsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPubsubmsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPubsubmsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPubsubmsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPubsubmsg
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPubsubmsg
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPubsubmsg
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPubsubmsg        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPubsubmsg          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPubsubmsg = fmt.Errorf("proto: unexpected end of group")
)
