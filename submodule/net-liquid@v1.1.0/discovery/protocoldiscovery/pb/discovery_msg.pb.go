// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: discovery_msg.proto

package pb

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DiscoveryMsg_Type int32

const (
	DiscoveryMsg_Announce DiscoveryMsg_Type = 0
	DiscoveryMsg_FindReq  DiscoveryMsg_Type = 1
	DiscoveryMsg_FindRes  DiscoveryMsg_Type = 2
)

var DiscoveryMsg_Type_name = map[int32]string{
	0: "Announce",
	1: "FindReq",
	2: "FindRes",
}

var DiscoveryMsg_Type_value = map[string]int32{
	"Announce": 0,
	"FindReq":  1,
	"FindRes":  2,
}

func (x DiscoveryMsg_Type) String() string {
	return proto.EnumName(DiscoveryMsg_Type_name, int32(x))
}

func (DiscoveryMsg_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5a6010f00700fb32, []int{0, 0}
}

type DiscoveryMsg struct {
	Type   DiscoveryMsg_Type `protobuf:"varint,1,opt,name=type,proto3,enum=discovery.DiscoveryMsg_Type" json:"type,omitempty"`
	PInfos []*PeerInfo       `protobuf:"bytes,2,rep,name=pInfos,proto3" json:"pInfos,omitempty"`
	Size_  uint32            `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
}

func (m *DiscoveryMsg) Reset()         { *m = DiscoveryMsg{} }
func (m *DiscoveryMsg) String() string { return proto.CompactTextString(m) }
func (*DiscoveryMsg) ProtoMessage()    {}
func (*DiscoveryMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a6010f00700fb32, []int{0}
}
func (m *DiscoveryMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiscoveryMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DiscoveryMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DiscoveryMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscoveryMsg.Merge(m, src)
}
func (m *DiscoveryMsg) XXX_Size() int {
	return m.Size()
}
func (m *DiscoveryMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscoveryMsg.DiscardUnknown(m)
}

var xxx_messageInfo_DiscoveryMsg proto.InternalMessageInfo

func (m *DiscoveryMsg) GetType() DiscoveryMsg_Type {
	if m != nil {
		return m.Type
	}
	return DiscoveryMsg_Announce
}

func (m *DiscoveryMsg) GetPInfos() []*PeerInfo {
	if m != nil {
		return m.PInfos
	}
	return nil
}

func (m *DiscoveryMsg) GetSize_() uint32 {
	if m != nil {
		return m.Size_
	}
	return 0
}

type PeerInfo struct {
	Pid  string `protobuf:"bytes,1,opt,name=pid,proto3" json:"pid,omitempty"`
	Addr string `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *PeerInfo) Reset()         { *m = PeerInfo{} }
func (m *PeerInfo) String() string { return proto.CompactTextString(m) }
func (*PeerInfo) ProtoMessage()    {}
func (*PeerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a6010f00700fb32, []int{1}
}
func (m *PeerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerInfo.Merge(m, src)
}
func (m *PeerInfo) XXX_Size() int {
	return m.Size()
}
func (m *PeerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PeerInfo proto.InternalMessageInfo

func (m *PeerInfo) GetPid() string {
	if m != nil {
		return m.Pid
	}
	return ""
}

func (m *PeerInfo) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func init() {
	proto.RegisterEnum("discovery.DiscoveryMsg_Type", DiscoveryMsg_Type_name, DiscoveryMsg_Type_value)
	proto.RegisterType((*DiscoveryMsg)(nil), "discovery.DiscoveryMsg")
	proto.RegisterType((*PeerInfo)(nil), "discovery.PeerInfo")
}

func init() { proto.RegisterFile("discovery_msg.proto", fileDescriptor_5a6010f00700fb32) }

var fileDescriptor_5a6010f00700fb32 = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xcf, 0x4a, 0xc3, 0x30,
	0x1c, 0xc7, 0x9b, 0x6d, 0xcc, 0x2d, 0x9b, 0x52, 0xb2, 0x4b, 0x0f, 0x12, 0x46, 0x4f, 0x05, 0x31,
	0x19, 0xf3, 0x09, 0x14, 0x11, 0x3c, 0x0c, 0xa4, 0x78, 0xf2, 0x22, 0x5d, 0x13, 0x6b, 0xb0, 0x4d,
	0xba, 0xa4, 0x15, 0xea, 0x53, 0xf8, 0x2a, 0xbe, 0x85, 0xc7, 0x1d, 0x3d, 0x4a, 0xfb, 0x22, 0xd2,
	0xe0, 0xba, 0xde, 0xbe, 0xdf, 0x4f, 0x3e, 0xf9, 0xe5, 0x0f, 0x5c, 0x30, 0x61, 0x62, 0xf5, 0xce,
	0x75, 0xf5, 0x9c, 0x99, 0x84, 0xe4, 0x5a, 0x15, 0x0a, 0x4d, 0x3b, 0xe8, 0x7f, 0x01, 0x38, 0xbf,
	0x3d, 0xb4, 0x8d, 0x49, 0xd0, 0x0a, 0x8e, 0x8a, 0x2a, 0xe7, 0x1e, 0x58, 0x82, 0xe0, 0x6c, 0x7d,
	0x4e, 0x3a, 0x95, 0xf4, 0x35, 0xf2, 0x58, 0xe5, 0x3c, 0xb4, 0x26, 0xba, 0x80, 0xe3, 0xfc, 0x5e,
	0xbe, 0x28, 0xe3, 0x0d, 0x96, 0xc3, 0x60, 0xb6, 0x5e, 0xf4, 0xf6, 0x3c, 0x70, 0xae, 0xdb, 0xb5,
	0xf0, 0x5f, 0x41, 0x08, 0x8e, 0x8c, 0xf8, 0xe0, 0xde, 0x70, 0x09, 0x82, 0xd3, 0xd0, 0x66, 0x9f,
	0xc0, 0x51, 0x3b, 0x0e, 0xcd, 0xe1, 0xe4, 0x5a, 0x4a, 0x55, 0xca, 0x98, 0xbb, 0x0e, 0x9a, 0xc1,
	0x93, 0x3b, 0x21, 0x59, 0xc8, 0x77, 0x2e, 0x38, 0x16, 0xe3, 0x0e, 0xfc, 0x15, 0x9c, 0x1c, 0xe6,
	0x22, 0x17, 0x0e, 0x73, 0xc1, 0xec, 0x6d, 0xa7, 0x61, 0x1b, 0xdb, 0x13, 0x22, 0xc6, 0xb4, 0x37,
	0xb0, 0xc8, 0xe6, 0x9b, 0xe4, 0xbb, 0xc6, 0x60, 0x5f, 0x63, 0xf0, 0x5b, 0x63, 0xf0, 0xd9, 0x60,
	0x67, 0xdf, 0x60, 0xe7, 0xa7, 0xc1, 0xce, 0xd3, 0x26, 0x7e, 0x8d, 0x84, 0xcc, 0xa2, 0x37, 0xae,
	0x89, 0xd2, 0x09, 0x3d, 0xd6, 0xcb, 0x44, 0xd1, 0x4c, 0xb1, 0x32, 0xe5, 0x54, 0xf2, 0x82, 0xa6,
	0x62, 0x57, 0x0a, 0x46, 0xbb, 0xa7, 0x51, 0xfb, 0x95, 0xb1, 0x4a, 0x7b, 0x64, 0xbb, 0x1d, 0x5b,
	0x7a, 0xf5, 0x17, 0x00, 0x00, 0xff, 0xff, 0x00, 0xab, 0x6f, 0x1b, 0x77, 0x01, 0x00, 0x00,
}

func (m *DiscoveryMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiscoveryMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DiscoveryMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Size_ != 0 {
		i = encodeVarintDiscoveryMsg(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x18
	}
	if len(m.PInfos) > 0 {
		for iNdEx := len(m.PInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDiscoveryMsg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Type != 0 {
		i = encodeVarintDiscoveryMsg(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PeerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeerInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeerInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintDiscoveryMsg(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Pid) > 0 {
		i -= len(m.Pid)
		copy(dAtA[i:], m.Pid)
		i = encodeVarintDiscoveryMsg(dAtA, i, uint64(len(m.Pid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDiscoveryMsg(dAtA []byte, offset int, v uint64) int {
	offset -= sovDiscoveryMsg(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DiscoveryMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovDiscoveryMsg(uint64(m.Type))
	}
	if len(m.PInfos) > 0 {
		for _, e := range m.PInfos {
			l = e.Size()
			n += 1 + l + sovDiscoveryMsg(uint64(l))
		}
	}
	if m.Size_ != 0 {
		n += 1 + sovDiscoveryMsg(uint64(m.Size_))
	}
	return n
}

func (m *PeerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pid)
	if l > 0 {
		n += 1 + l + sovDiscoveryMsg(uint64(l))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovDiscoveryMsg(uint64(l))
	}
	return n
}

func sovDiscoveryMsg(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDiscoveryMsg(x uint64) (n int) {
	return sovDiscoveryMsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DiscoveryMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiscoveryMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiscoveryMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiscoveryMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscoveryMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= DiscoveryMsg_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscoveryMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDiscoveryMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDiscoveryMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PInfos = append(m.PInfos, &PeerInfo{})
			if err := m.PInfos[len(m.PInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscoveryMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDiscoveryMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDiscoveryMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiscoveryMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscoveryMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscoveryMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscoveryMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscoveryMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscoveryMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscoveryMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiscoveryMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDiscoveryMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDiscoveryMsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDiscoveryMsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDiscoveryMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDiscoveryMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDiscoveryMsg
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDiscoveryMsg
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDiscoveryMsg
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDiscoveryMsg        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDiscoveryMsg          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDiscoveryMsg = fmt.Errorf("proto: unexpected end of group")
)
