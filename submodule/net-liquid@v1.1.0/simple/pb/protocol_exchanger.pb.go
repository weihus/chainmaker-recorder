// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protocol_exchanger.proto

package pb

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ProtocolExchangerMsg_ProtocolExchangerMsgType int32

const (
	ProtocolExchangerMsg_PUSH     ProtocolExchangerMsg_ProtocolExchangerMsgType = 0
	ProtocolExchangerMsg_PUSH_OK  ProtocolExchangerMsg_ProtocolExchangerMsgType = 1
	ProtocolExchangerMsg_REQUEST  ProtocolExchangerMsg_ProtocolExchangerMsgType = 2
	ProtocolExchangerMsg_RESPONSE ProtocolExchangerMsg_ProtocolExchangerMsgType = 3
)

var ProtocolExchangerMsg_ProtocolExchangerMsgType_name = map[int32]string{
	0: "PUSH",
	1: "PUSH_OK",
	2: "REQUEST",
	3: "RESPONSE",
}

var ProtocolExchangerMsg_ProtocolExchangerMsgType_value = map[string]int32{
	"PUSH":     0,
	"PUSH_OK":  1,
	"REQUEST":  2,
	"RESPONSE": 3,
}

func (x ProtocolExchangerMsg_ProtocolExchangerMsgType) String() string {
	return proto.EnumName(ProtocolExchangerMsg_ProtocolExchangerMsgType_name, int32(x))
}

func (ProtocolExchangerMsg_ProtocolExchangerMsgType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cbfed1440505ef23, []int{0, 0}
}

type ProtocolExchangerMsg struct {
	Pid       string                                        `protobuf:"bytes,1,opt,name=pid,proto3" json:"pid,omitempty"`
	Protocols []string                                      `protobuf:"bytes,2,rep,name=protocols,proto3" json:"protocols,omitempty"`
	MsgType   ProtocolExchangerMsg_ProtocolExchangerMsgType `protobuf:"varint,3,opt,name=msg_type,json=msgType,proto3,enum=net.ProtocolExchangerMsg_ProtocolExchangerMsgType" json:"msg_type,omitempty"`
}

func (m *ProtocolExchangerMsg) Reset()         { *m = ProtocolExchangerMsg{} }
func (m *ProtocolExchangerMsg) String() string { return proto.CompactTextString(m) }
func (*ProtocolExchangerMsg) ProtoMessage()    {}
func (*ProtocolExchangerMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbfed1440505ef23, []int{0}
}
func (m *ProtocolExchangerMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtocolExchangerMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProtocolExchangerMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProtocolExchangerMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtocolExchangerMsg.Merge(m, src)
}
func (m *ProtocolExchangerMsg) XXX_Size() int {
	return m.Size()
}
func (m *ProtocolExchangerMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtocolExchangerMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ProtocolExchangerMsg proto.InternalMessageInfo

func (m *ProtocolExchangerMsg) GetPid() string {
	if m != nil {
		return m.Pid
	}
	return ""
}

func (m *ProtocolExchangerMsg) GetProtocols() []string {
	if m != nil {
		return m.Protocols
	}
	return nil
}

func (m *ProtocolExchangerMsg) GetMsgType() ProtocolExchangerMsg_ProtocolExchangerMsgType {
	if m != nil {
		return m.MsgType
	}
	return ProtocolExchangerMsg_PUSH
}

func init() {
	proto.RegisterEnum("net.ProtocolExchangerMsg_ProtocolExchangerMsgType", ProtocolExchangerMsg_ProtocolExchangerMsgType_name, ProtocolExchangerMsg_ProtocolExchangerMsgType_value)
	proto.RegisterType((*ProtocolExchangerMsg)(nil), "net.ProtocolExchangerMsg")
}

func init() { proto.RegisterFile("protocol_exchanger.proto", fileDescriptor_cbfed1440505ef23) }

var fileDescriptor_cbfed1440505ef23 = []byte{
	// 270 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x28, 0x28, 0xca, 0x2f,
	0xc9, 0x4f, 0xce, 0xcf, 0x89, 0x4f, 0xad, 0x48, 0xce, 0x48, 0xcc, 0x4b, 0x4f, 0x2d, 0xd2, 0x03,
	0x0b, 0x09, 0x31, 0xe7, 0xa5, 0x96, 0x28, 0x3d, 0x66, 0xe4, 0x12, 0x09, 0x80, 0xaa, 0x70, 0x85,
	0x29, 0xf0, 0x2d, 0x4e, 0x17, 0x12, 0xe0, 0x62, 0x2e, 0xc8, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4,
	0xe0, 0x0c, 0x02, 0x31, 0x85, 0x64, 0xb8, 0x38, 0x61, 0x66, 0x15, 0x4b, 0x30, 0x29, 0x30, 0x6b,
	0x70, 0x06, 0x21, 0x04, 0x84, 0x7c, 0xb9, 0x38, 0x72, 0x8b, 0xd3, 0xe3, 0x4b, 0x2a, 0x0b, 0x52,
	0x25, 0x98, 0x15, 0x18, 0x35, 0xf8, 0x8c, 0x8c, 0xf4, 0xf2, 0x52, 0x4b, 0xf4, 0xb0, 0x19, 0x8e,
	0x55, 0x30, 0xa4, 0xb2, 0x20, 0x35, 0x88, 0x3d, 0x17, 0xc2, 0x50, 0xf2, 0xe1, 0x92, 0xc0, 0xa5,
	0x48, 0x88, 0x83, 0x8b, 0x25, 0x20, 0x34, 0xd8, 0x43, 0x80, 0x41, 0x88, 0x9b, 0x8b, 0x1d, 0xc4,
	0x8a, 0xf7, 0xf7, 0x16, 0x60, 0x04, 0x71, 0x82, 0x5c, 0x03, 0x43, 0x5d, 0x83, 0x43, 0x04, 0x98,
	0x84, 0x78, 0xb8, 0x38, 0x82, 0x5c, 0x83, 0x03, 0xfc, 0xfd, 0x82, 0x5d, 0x05, 0x98, 0x9d, 0x82,
	0x4e, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5,
	0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0xca, 0x22, 0x39, 0x23, 0x31, 0x33,
	0x2f, 0x37, 0x31, 0x3b, 0xb5, 0x48, 0x2f, 0xbf, 0x28, 0x5d, 0x1f, 0xc1, 0xd5, 0x4d, 0xcf, 0xd7,
	0xcf, 0xcd, 0x4f, 0x29, 0xcd, 0x49, 0xd5, 0xcf, 0x4b, 0x2d, 0xd1, 0xcf, 0xc9, 0x2c, 0x2c, 0xcd,
	0x4c, 0xd1, 0x2f, 0xce, 0xcc, 0x2d, 0xc8, 0x49, 0xd5, 0x2f, 0x48, 0x4a, 0x62, 0x03, 0xfb, 0xdd,
	0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x41, 0x0a, 0x26, 0x0a, 0x61, 0x01, 0x00, 0x00,
}

func (m *ProtocolExchangerMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtocolExchangerMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtocolExchangerMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MsgType != 0 {
		i = encodeVarintProtocolExchanger(dAtA, i, uint64(m.MsgType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Protocols) > 0 {
		for iNdEx := len(m.Protocols) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Protocols[iNdEx])
			copy(dAtA[i:], m.Protocols[iNdEx])
			i = encodeVarintProtocolExchanger(dAtA, i, uint64(len(m.Protocols[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Pid) > 0 {
		i -= len(m.Pid)
		copy(dAtA[i:], m.Pid)
		i = encodeVarintProtocolExchanger(dAtA, i, uint64(len(m.Pid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProtocolExchanger(dAtA []byte, offset int, v uint64) int {
	offset -= sovProtocolExchanger(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProtocolExchangerMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pid)
	if l > 0 {
		n += 1 + l + sovProtocolExchanger(uint64(l))
	}
	if len(m.Protocols) > 0 {
		for _, s := range m.Protocols {
			l = len(s)
			n += 1 + l + sovProtocolExchanger(uint64(l))
		}
	}
	if m.MsgType != 0 {
		n += 1 + sovProtocolExchanger(uint64(m.MsgType))
	}
	return n
}

func sovProtocolExchanger(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProtocolExchanger(x uint64) (n int) {
	return sovProtocolExchanger(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProtocolExchangerMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolExchanger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtocolExchangerMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtocolExchangerMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolExchanger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocolExchanger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolExchanger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocols", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolExchanger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocolExchanger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocolExchanger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocols = append(m.Protocols, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			m.MsgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolExchanger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgType |= ProtocolExchangerMsg_ProtocolExchangerMsgType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolExchanger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtocolExchanger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProtocolExchanger(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProtocolExchanger
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtocolExchanger
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtocolExchanger
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProtocolExchanger
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProtocolExchanger
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProtocolExchanger
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProtocolExchanger        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProtocolExchanger          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProtocolExchanger = fmt.Errorf("proto: unexpected end of group")
)
