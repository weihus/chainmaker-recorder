// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: relay.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RelayMsg_Type int32

const (
	RelayMsg_HOP    RelayMsg_Type = 0
	RelayMsg_STOP   RelayMsg_Type = 1
	RelayMsg_STATUS RelayMsg_Type = 2
)

var RelayMsg_Type_name = map[int32]string{
	0: "HOP",
	1: "STOP",
	2: "STATUS",
}

var RelayMsg_Type_value = map[string]int32{
	"HOP":    0,
	"STOP":   1,
	"STATUS": 2,
}

func (x RelayMsg_Type) String() string {
	return proto.EnumName(RelayMsg_Type_name, int32(x))
}

func (RelayMsg_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9f69a7d5a802d584, []int{0, 0}
}

type RelayMsg_Status int32

const (
	RelayMsg_SUCCESS                    RelayMsg_Status = 0
	RelayMsg_HOP_SRC_ADDR_TOO_LONG      RelayMsg_Status = 1
	RelayMsg_HOP_DST_ADDR_TOO_LONG      RelayMsg_Status = 2
	RelayMsg_HOP_SRC_MULTIADDR_INVALID  RelayMsg_Status = 3
	RelayMsg_HOP_DST_MULTIADDR_INVALID  RelayMsg_Status = 4
	RelayMsg_HOP_NO_CONN_TO_DST         RelayMsg_Status = 5
	RelayMsg_HOP_CANT_DIAL_DST          RelayMsg_Status = 6
	RelayMsg_HOP_CANT_OPEN_DST_STREAM   RelayMsg_Status = 7
	RelayMsg_HOP_CANT_SPEAK_RELAY       RelayMsg_Status = 8
	RelayMsg_HOP_CANT_RELAY_TO_SELF     RelayMsg_Status = 9
	RelayMsg_STOP_SRC_ADDR_TOO_LONG     RelayMsg_Status = 10
	RelayMsg_STOP_DST_ADDR_TOO_LONG     RelayMsg_Status = 11
	RelayMsg_STOP_SRC_MULTIADDR_INVALID RelayMsg_Status = 12
	RelayMsg_STOP_DST_MULTIADDR_INVALID RelayMsg_Status = 13
	RelayMsg_STOP_RELAY_REFUSED         RelayMsg_Status = 14
	RelayMsg_MALFORMED_MESSAGE          RelayMsg_Status = 15
)

var RelayMsg_Status_name = map[int32]string{
	0:  "SUCCESS",
	1:  "HOP_SRC_ADDR_TOO_LONG",
	2:  "HOP_DST_ADDR_TOO_LONG",
	3:  "HOP_SRC_MULTIADDR_INVALID",
	4:  "HOP_DST_MULTIADDR_INVALID",
	5:  "HOP_NO_CONN_TO_DST",
	6:  "HOP_CANT_DIAL_DST",
	7:  "HOP_CANT_OPEN_DST_STREAM",
	8:  "HOP_CANT_SPEAK_RELAY",
	9:  "HOP_CANT_RELAY_TO_SELF",
	10: "STOP_SRC_ADDR_TOO_LONG",
	11: "STOP_DST_ADDR_TOO_LONG",
	12: "STOP_SRC_MULTIADDR_INVALID",
	13: "STOP_DST_MULTIADDR_INVALID",
	14: "STOP_RELAY_REFUSED",
	15: "MALFORMED_MESSAGE",
}

var RelayMsg_Status_value = map[string]int32{
	"SUCCESS":                    0,
	"HOP_SRC_ADDR_TOO_LONG":      1,
	"HOP_DST_ADDR_TOO_LONG":      2,
	"HOP_SRC_MULTIADDR_INVALID":  3,
	"HOP_DST_MULTIADDR_INVALID":  4,
	"HOP_NO_CONN_TO_DST":         5,
	"HOP_CANT_DIAL_DST":          6,
	"HOP_CANT_OPEN_DST_STREAM":   7,
	"HOP_CANT_SPEAK_RELAY":       8,
	"HOP_CANT_RELAY_TO_SELF":     9,
	"STOP_SRC_ADDR_TOO_LONG":     10,
	"STOP_DST_ADDR_TOO_LONG":     11,
	"STOP_SRC_MULTIADDR_INVALID": 12,
	"STOP_DST_MULTIADDR_INVALID": 13,
	"STOP_RELAY_REFUSED":         14,
	"MALFORMED_MESSAGE":          15,
}

func (x RelayMsg_Status) String() string {
	return proto.EnumName(RelayMsg_Status_name, int32(x))
}

func (RelayMsg_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9f69a7d5a802d584, []int{0, 1}
}

type RelayMsg struct {
	Type    RelayMsg_Type   `protobuf:"varint,1,opt,name=type,proto3,enum=relay.RelayMsg_Type" json:"type,omitempty"`
	SrcPeer *RelayMsg_Peer  `protobuf:"bytes,2,opt,name=srcPeer,proto3" json:"srcPeer,omitempty"`
	DstPeer *RelayMsg_Peer  `protobuf:"bytes,3,opt,name=dstPeer,proto3" json:"dstPeer,omitempty"`
	Code    RelayMsg_Status `protobuf:"varint,4,opt,name=code,proto3,enum=relay.RelayMsg_Status" json:"code,omitempty"`
}

func (m *RelayMsg) Reset()         { *m = RelayMsg{} }
func (m *RelayMsg) String() string { return proto.CompactTextString(m) }
func (*RelayMsg) ProtoMessage()    {}
func (*RelayMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f69a7d5a802d584, []int{0}
}
func (m *RelayMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelayMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelayMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelayMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayMsg.Merge(m, src)
}
func (m *RelayMsg) XXX_Size() int {
	return m.Size()
}
func (m *RelayMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayMsg.DiscardUnknown(m)
}

var xxx_messageInfo_RelayMsg proto.InternalMessageInfo

func (m *RelayMsg) GetType() RelayMsg_Type {
	if m != nil {
		return m.Type
	}
	return RelayMsg_HOP
}

func (m *RelayMsg) GetSrcPeer() *RelayMsg_Peer {
	if m != nil {
		return m.SrcPeer
	}
	return nil
}

func (m *RelayMsg) GetDstPeer() *RelayMsg_Peer {
	if m != nil {
		return m.DstPeer
	}
	return nil
}

func (m *RelayMsg) GetCode() RelayMsg_Status {
	if m != nil {
		return m.Code
	}
	return RelayMsg_SUCCESS
}

type RelayMsg_Peer struct {
	Id    []byte   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Addrs [][]byte `protobuf:"bytes,2,rep,name=addrs,proto3" json:"addrs,omitempty"`
}

func (m *RelayMsg_Peer) Reset()         { *m = RelayMsg_Peer{} }
func (m *RelayMsg_Peer) String() string { return proto.CompactTextString(m) }
func (*RelayMsg_Peer) ProtoMessage()    {}
func (*RelayMsg_Peer) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f69a7d5a802d584, []int{0, 0}
}
func (m *RelayMsg_Peer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelayMsg_Peer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelayMsg_Peer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelayMsg_Peer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayMsg_Peer.Merge(m, src)
}
func (m *RelayMsg_Peer) XXX_Size() int {
	return m.Size()
}
func (m *RelayMsg_Peer) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayMsg_Peer.DiscardUnknown(m)
}

var xxx_messageInfo_RelayMsg_Peer proto.InternalMessageInfo

func (m *RelayMsg_Peer) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *RelayMsg_Peer) GetAddrs() [][]byte {
	if m != nil {
		return m.Addrs
	}
	return nil
}

func init() {
	proto.RegisterEnum("relay.RelayMsg_Type", RelayMsg_Type_name, RelayMsg_Type_value)
	proto.RegisterEnum("relay.RelayMsg_Status", RelayMsg_Status_name, RelayMsg_Status_value)
	proto.RegisterType((*RelayMsg)(nil), "relay.RelayMsg")
	proto.RegisterType((*RelayMsg_Peer)(nil), "relay.RelayMsg.Peer")
}

func init() { proto.RegisterFile("relay.proto", fileDescriptor_9f69a7d5a802d584) }

var fileDescriptor_9f69a7d5a802d584 = []byte{
	// 489 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0x4f, 0x8f, 0xd2, 0x40,
	0x18, 0x87, 0x69, 0x29, 0x7f, 0x7c, 0x41, 0x1c, 0x27, 0x2c, 0xe9, 0x12, 0x6d, 0x08, 0x89, 0x09,
	0x31, 0x0a, 0x89, 0x5e, 0xbd, 0x8c, 0x74, 0xd8, 0x25, 0xb6, 0x9d, 0x66, 0x66, 0x30, 0xd1, 0x4b,
	0xc3, 0xd2, 0x66, 0x25, 0xae, 0x0b, 0x96, 0xee, 0x81, 0x6f, 0xe1, 0x77, 0xf1, 0x4b, 0x98, 0x78,
	0xd9, 0xa3, 0x47, 0x03, 0x5f, 0xc4, 0xcc, 0x60, 0x7b, 0x58, 0x36, 0x7b, 0xeb, 0xbc, 0xcf, 0xf3,
	0xf6, 0x7d, 0x7f, 0x4d, 0x07, 0x1a, 0x69, 0x72, 0x35, 0xdf, 0x0e, 0xd7, 0xe9, 0x2a, 0x5b, 0xe1,
	0x8a, 0x3e, 0xf4, 0x7f, 0x57, 0xa0, 0xce, 0xd5, 0x93, 0xbf, 0xb9, 0xc4, 0x03, 0xb0, 0xb2, 0xed,
	0x3a, 0xb1, 0x8d, 0x9e, 0x31, 0x68, 0xbd, 0x69, 0x0f, 0x0f, 0x7e, 0x8e, 0x87, 0x72, 0xbb, 0x4e,
	0xb8, 0x36, 0xf0, 0x10, 0x6a, 0x9b, 0x74, 0x11, 0x26, 0x49, 0x6a, 0x9b, 0x3d, 0x63, 0xd0, 0x38,
	0x96, 0x15, 0xe3, 0xb9, 0xa4, 0xfc, 0x78, 0x93, 0x69, 0xbf, 0xfc, 0x90, 0xff, 0x5f, 0xc2, 0x2f,
	0xc1, 0x5a, 0xac, 0xe2, 0xc4, 0xb6, 0xf4, 0x26, 0x9d, 0xbb, 0xb2, 0xc8, 0xe6, 0xd9, 0xcd, 0x86,
	0x6b, 0xa7, 0xfb, 0x0a, 0x2c, 0xdd, 0xd3, 0x02, 0x73, 0x19, 0xeb, 0xdd, 0x9b, 0xdc, 0x5c, 0xc6,
	0xb8, 0x0d, 0x95, 0x79, 0x1c, 0xa7, 0x1b, 0xdb, 0xec, 0x95, 0x07, 0x4d, 0x7e, 0x38, 0xf4, 0x5f,
	0x80, 0xa5, 0x72, 0xe0, 0x1a, 0x94, 0xcf, 0x59, 0x88, 0x4a, 0xb8, 0x0e, 0x96, 0x90, 0x2c, 0x44,
	0x06, 0x06, 0xa8, 0x0a, 0x49, 0xe4, 0x4c, 0x20, 0xb3, 0xff, 0xb3, 0x0c, 0xd5, 0xc3, 0x14, 0xdc,
	0x80, 0x9a, 0x98, 0x8d, 0xc7, 0x54, 0x08, 0x54, 0xc2, 0xa7, 0x70, 0x72, 0xce, 0xc2, 0x48, 0xf0,
	0x71, 0x44, 0x5c, 0x97, 0x47, 0x92, 0xb1, 0xc8, 0x63, 0xc1, 0x19, 0x32, 0x72, 0xe4, 0x0a, 0x79,
	0x07, 0x99, 0xf8, 0x39, 0x9c, 0xe6, 0x5d, 0xfe, 0xcc, 0x93, 0x53, 0xcd, 0xa7, 0xc1, 0x47, 0xe2,
	0x4d, 0x5d, 0x54, 0xce, 0xb1, 0xea, 0x3c, 0xc6, 0x16, 0xee, 0x00, 0x56, 0x38, 0x60, 0xd1, 0x98,
	0x05, 0x41, 0x24, 0x99, 0x32, 0x51, 0x05, 0x9f, 0xc0, 0x53, 0x55, 0x1f, 0x93, 0x40, 0x46, 0xee,
	0x94, 0x78, 0xba, 0x5c, 0xc5, 0xcf, 0xc0, 0x2e, 0xca, 0x2c, 0xa4, 0x81, 0x7e, 0xaf, 0x90, 0x9c,
	0x12, 0x1f, 0xd5, 0xb0, 0x0d, 0xed, 0x82, 0x8a, 0x90, 0x92, 0x0f, 0x11, 0xa7, 0x1e, 0xf9, 0x84,
	0xea, 0xb8, 0x0b, 0x9d, 0x82, 0xe8, 0x9a, 0x9a, 0x24, 0xa8, 0x37, 0x41, 0x8f, 0x14, 0x53, 0x1f,
	0xe9, 0x9e, 0xdc, 0x50, 0xb0, 0xe3, 0xe0, 0x0d, 0xec, 0x40, 0xb7, 0xe8, 0x3b, 0x8e, 0xd6, 0x2c,
	0xf8, 0xfd, 0xd1, 0x1f, 0xab, 0xe8, 0x9a, 0x1f, 0xf6, 0xe1, 0x74, 0x32, 0x13, 0xd4, 0x45, 0x2d,
	0x15, 0xdd, 0x27, 0xde, 0x84, 0x71, 0x9f, 0xba, 0x91, 0x4f, 0x85, 0x20, 0x67, 0x14, 0x3d, 0x79,
	0xff, 0xee, 0xd7, 0xce, 0x31, 0x6e, 0x77, 0x8e, 0xf1, 0x77, 0xe7, 0x18, 0x3f, 0xf6, 0x4e, 0xe9,
	0x76, 0xef, 0x94, 0xfe, 0xec, 0x9d, 0xd2, 0xe7, 0xfe, 0xe2, 0xcb, 0x7c, 0x79, 0xfd, 0x6d, 0xfe,
	0x35, 0x49, 0x87, 0xab, 0xf4, 0x72, 0x74, 0x9d, 0x64, 0xaf, 0xaf, 0x96, 0xdf, 0x6f, 0x96, 0xf1,
	0x48, 0xff, 0x5b, 0xa3, 0xf5, 0xc5, 0x45, 0x55, 0xdf, 0x8c, 0xb7, 0xff, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x91, 0x31, 0x48, 0xe6, 0x28, 0x03, 0x00, 0x00,
}

func (m *RelayMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelayMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelayMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintRelay(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x20
	}
	if m.DstPeer != nil {
		{
			size, err := m.DstPeer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelay(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SrcPeer != nil {
		{
			size, err := m.SrcPeer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelay(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintRelay(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RelayMsg_Peer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelayMsg_Peer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelayMsg_Peer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addrs) > 0 {
		for iNdEx := len(m.Addrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addrs[iNdEx])
			copy(dAtA[i:], m.Addrs[iNdEx])
			i = encodeVarintRelay(dAtA, i, uint64(len(m.Addrs[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRelay(dAtA []byte, offset int, v uint64) int {
	offset -= sovRelay(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RelayMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovRelay(uint64(m.Type))
	}
	if m.SrcPeer != nil {
		l = m.SrcPeer.Size()
		n += 1 + l + sovRelay(uint64(l))
	}
	if m.DstPeer != nil {
		l = m.DstPeer.Size()
		n += 1 + l + sovRelay(uint64(l))
	}
	if m.Code != 0 {
		n += 1 + sovRelay(uint64(m.Code))
	}
	return n
}

func (m *RelayMsg_Peer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	if len(m.Addrs) > 0 {
		for _, b := range m.Addrs {
			l = len(b)
			n += 1 + l + sovRelay(uint64(l))
		}
	}
	return n
}

func sovRelay(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRelay(x uint64) (n int) {
	return sovRelay(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RelayMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelayMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelayMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= RelayMsg_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SrcPeer == nil {
				m.SrcPeer = &RelayMsg_Peer{}
			}
			if err := m.SrcPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DstPeer == nil {
				m.DstPeer = &RelayMsg_Peer{}
			}
			if err := m.DstPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= RelayMsg_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRelay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelayMsg_Peer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Peer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Peer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addrs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addrs = append(m.Addrs, make([]byte, postIndex-iNdEx))
			copy(m.Addrs[len(m.Addrs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRelay(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRelay
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRelay
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRelay
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRelay
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRelay        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRelay          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRelay = fmt.Errorf("proto: unexpected end of group")
)
